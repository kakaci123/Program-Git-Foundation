using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using s26web.Models;
using s26web.Areas.shb.Models;
using System.Linq.Dynamic;
using Newtonsoft.Json.Linq;
using System.IO;
using NPOI.HSSF.UserModel;
using NPOI;
using System.Collections;
using System.Text;
using NPOI.HSSF.Util;
using System.Globalization;

namespace s26web.Models
{
    public class VolunteersModel
    {
        #region show
        /// <summary>
        /// 後台
        /// </summary> 
        public class VolunteersShow
        {
            [Key]
            [DisplayName("序號")]
            public int Id { get; set; }

            [DisplayName("手機")]
            [Required(ErrorMessage = "必填欄位")]
            public string Phone { get; set; }

            [DisplayName("密碼")]
            [RegularExpression(@"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,30}$", ErrorMessage = "密碼需包含英文大小寫及數字，至少八個字元以上")]
            [StringLength(100, ErrorMessage = "{0} 長度至少必須為 {2} 個字元。", MinimumLength = 8)]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [DisplayName("姓名")]
            [StringLength(10, ErrorMessage = "{0} 長度不得大於 10 個字元。")]
            [Required(ErrorMessage = "必填欄位")]
            public string Name { get; set; }

            [DisplayName("寶寶生日")]
            public DateTime? BabyBirthday { get; set; }

            [DisplayName("目前使用產品")]
            public int NowBrand { get; set; }
            [DisplayName("目前使用產品")]
            public string BrandName { get; set; }
            [DisplayName("電子信箱")]
            [Required(ErrorMessage = "必填欄位")]
            [DataType(DataType.EmailAddress)]
            public string Email { get; set; }

            public int CityId { get; set; }
            public int AreaId { get; set; }
            public string Address { get; set; }
            public string GiftMobile { get; set; }
            public int CityId2 { get; set; }
            public int AreaId2 { get; set; }
            public string CityName { get; set; }
            public string AreaName { get; set; }
            public string Address2 { get; set; }
            public string City2Name { get; set; }
            public string Area2Name { get; set; }

            [DisplayName("審核狀態")]
            [Required(ErrorMessage = "必填欄位")]
            public int Status { get; set; }

            public int SendCount { get; set; }
            public string SerialNo { get; set; }
            public string Photo { get; set; }
            public string MemberNumber { get; set; }
            [DisplayName("FB有聯絡")]
            public bool FBConnect { get; set; }
            [DisplayName("FB有加好友")]
            public bool FBFriend { get; set; }
            [DisplayName("客服備註")]
            public string Memo { get; set; }

            [DisplayName("註冊時間")]
            public DateTime CreateTime { get; set; }
            [DisplayName("更新時間")]
            public DateTime UpdateTime { get; set; }
            [DisplayName("管理員更新時間")]
            public DateTime? AdminUpdateTime { get; set; }
            [DisplayName("最後更新者")]
            public int? LastMemberId { get; set; }
            [DisplayName("最後更新者")]
            public string LastMember { get; set; }
            [DisplayName("審核時間")]
            public DateTime? EnableTime { get; set; }
            [DisplayName("審核失敗原因")]
            public string FailReason { get; set; }
        }

        public class VolunteersShowEdit
        {
            [Key]
            [DisplayName("序號")]
            public int Id { get; set; }

            [DisplayName("手機")]
            [Required(ErrorMessage = "必填欄位")]
            public string Phone { get; set; }

            [DisplayName("密碼")]
            [RegularExpression(@"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,30}$", ErrorMessage = "密碼需包含英文大小寫及數字，至少八個字元以上")]
            [StringLength(100, ErrorMessage = "{0} 長度至少必須為 {2} 個字元。", MinimumLength = 8)]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [DisplayName("姓名")]
            [StringLength(10, ErrorMessage = "{0} 長度不得大於 10 個字元。")]
            [Required(ErrorMessage = "必填欄位")]
            public string Name { get; set; }

            [DisplayName("寶寶生日")]
            public DateTime? BabyBirthday { get; set; }

            [DisplayName("目前使用產品")]
            public int NowBrand { get; set; }
            [DisplayName("目前使用產品")]
            public string BrandName { get; set; }
            [DisplayName("電子信箱")]
            [Required(ErrorMessage = "必填欄位")]
            [DataType(DataType.EmailAddress)]
            public string Email { get; set; }

            public int CityId { get; set; }
            public int AreaId { get; set; }
            public string Address { get; set; }
            [DisplayName("宅配 & 贈品電話")]
            public string GiftMobile { get; set; }
            public int CityId2 { get; set; }
            public int AreaId2 { get; set; }
            public string CityName { get; set; }
            public string AreaName { get; set; }
            public string Address2 { get; set; }
            public string City2Name { get; set; }
            public string Area2Name { get; set; }

            [DisplayName("審核狀態")]
            [Required(ErrorMessage = "必填欄位")]
            public int Status { get; set; }

            public int SendCount { get; set; }
            [DisplayName("驗證序號")]
            public string SerialNo { get; set; }
            [DisplayName("媽媽 /寶寶手冊圖片")]
            public string Photos { get; set; }
            [DisplayName("eCRM")]
            public string MemberNumber { get; set; }
            [DisplayName("最後更新管理者")]
            public string MemberNumberName { get; set; }
            [DisplayName("FB有聯絡")]
            public bool FBConnect { get; set; }
            [DisplayName("FB有加好友")]
            public bool FBFriend { get; set; }
            [DisplayName("客服備註")]
            public string Memo { get; set; }

            [DisplayName("註冊時間")]
            public DateTime CreateTime { get; set; }
            [DisplayName("更新時間")]
            public DateTime UpdateTime { get; set; }
            [DisplayName("管理員更新時間")]
            public DateTime? AdminUpdateTime { get; set; }
            [DisplayName("最後更新者")]
            public int? LastMemberId { get; set; }
            [DisplayName("最後更新者")]
            public string LastMember { get; set; }
            [DisplayName("審核時間")]
            public DateTime? EnableTime { get; set; }
            [DisplayName("審核失敗原因")]
            public string FailReason { get; set; }
        }

        public const int MaxDayPoint = 9;
        private static string hash = "sOoHoOBooK!!";
        public string Keyword = "";
        public string source = "0";
        public bool Search_Enable = false;
        public bool Search_Review = false;
        public bool Search_FirstOrder = false;
        public DateTime? create_time_start = null;
        public DateTime? create_time_end = null;
        public DateTime? enable_time_start = null;
        public DateTime? enable_time_end = null;
        public int status = 0;
        public string from = "";
        #endregion

        public static string Get_HashPassword(string input)
        {
            return Method.GetMD5(hash + input, true);
        }

        private string Query(string query = "")
        {
            string sql = "";

            if (query != "")
            {
                query = HttpUtility.HtmlEncode(query);
                sql = Method.SQL_Combin(sql, "Name", "OR", "( \"" + query + "\")", ".Contains", false);
                sql = Method.SQL_Combin(sql, "Email", "OR", "( \"" + query + "\")", ".Contains", false);
                sql = Method.SQL_Combin(sql, "MemberNumber", "OR", "( \"" + query + "\")", ".Contains", false);
                sql = Method.SQL_Combin(sql, "Mobile", "OR", "( \"" + query + "\")", ".Contains", false);
                sql = Method.SQL_Combin(sql, "Phone", "OR", "( \"" + query + "\")", ".Contains", false);

            }

            return sql;
        }

        public VolunteersShowEdit Get_One(int id)
        {
            s26webDataContext db = new s26webDataContext();
            VolunteersShowEdit data = new VolunteersShowEdit();
            try
            {
            var item = db.Volunteers.FirstOrDefault(f => f.Id == id);
            var member = db.eCRM.FirstOrDefault(f => f.Id == item.Status);
            //var u = db.UserProfile.Where(w => w.Id == i.LastUserId).Select(s => s.Name).FirstOrDefault();

            data.Phone = item.Phone;
            data.Password = item.Password;
            data.Name = item.Name;
            data.BabyBirthday = item.BabyBirthday;
            data.NowBrand = item.NowBrand;
            data.BrandName = item.BrandName;
            data.Email = item.Email;
            data.CityId = item.CityId.Value; 
            data.AreaId = item.AreaId.Value;
            data.Address = item.Address;
            data.GiftMobile = item.GiftMobile;
            //data.CityId2 = item.CityId2;
            //data.AreaId2 = item.AreaId2;
            data.Address2 = item.Address2;
            data.Status = item.Status;
            //data.SendCount = v.SendCount;
            data.SerialNo = item.SerialNo;
            data.Photos = item.Photos;
            data.MemberNumber = item.MemberNumber;
            data.MemberNumberName = member.UserName;
            data.FBConnect = item.FBConnect;
            data.FBFriend = item.FBFriend;
            data.Memo = item.Memo;
            data.CreateTime = item.CreateTime.AddHours(8);
            data.UpdateTime = item.UpdateTime.AddHours(8);

            if (item.AdminUpdateTime == null)
            { data.AdminUpdateTime = null; }
            else
            { data.AdminUpdateTime = item.AdminUpdateTime.Value.AddHours(8); }

            db.Connection.Close();
            return data;
            }
            catch 
            {
                return null;
            }
        }

        public List<VolunteersShow> Get_Data(int p = 1, int take = 10)
        {
            try
            {
                s26webDataContext db = new s26webDataContext();
                var data = Get().OrderByDescending(o => o.CreateTime).Skip((p - 1) * take).Take(take);
                List<VolunteersShow> result = new List<VolunteersShow>();
                foreach (var i in data)
                {
                    result.Add(i);
                }
                db.Connection.Close();
                return result;
            }
            catch { return new List<VolunteersShow>(); }
        }
        private IQueryable<VolunteersShow> Get()
        {
            s26webDataContext db = new s26webDataContext();
            var data = from v in db.VolunteersAndAddress
                       select new VolunteersShow
                       {
                           Id = v.Id,
                           Phone = v.Phone,
                           Password = v.Password,
                           Name = v.Name,
                           BabyBirthday = v.BabyBirthday,
                           NowBrand = v.NowBrand,
                           BrandName = v.BrandName,
                           Email = v.Email,
                           CityName = v.Name,
                           AreaName = v.Name,
                           Address = v.Address,
                           GiftMobile = v.GiftMobile,
                           City2Name = v.Name,
                           Area2Name = v.Name,
                           Address2 = v.Address2,
                           Status = v.Status,
                           SendCount = v.SendCount,
                           SerialNo = v.SerialNo,
                           Photo = v.Photos,
                           MemberNumber = v.MemberNumber,
                           //FBConnect = v.FBConnect,
                           //FBFriend = v.FBFriend,
                           Memo = v.Memo,
                           CreateTime = v.CreateTime,
                           UpdateTime = v.UpdateTime,
                           AdminUpdateTime = v.AdminUpdateTime,
                           //LastMember
                           EnableTime = v.EnableTime,
                           FailReason = v.FailReason
                       };
            if (Keyword != "")
            {
                data = data.Where(Query(Keyword));
            }
            if (status == 1)
            {
            }
            //if (create_time_start != null)
            //{
            //    data = data.Where(w => w.CreateTime >= create_time_start.Value.AddHours(-8));
            //}
            //if (create_time_end != null)
            //{
            //    data = data.Where(w => w.CreateTime <= create_time_end.Value.AddHours(-8));
            //}
            //if (enable_time_start != null)
            //{
            //    data = data.Where(w => w.EnableTime >= enable_time_start.Value.AddHours(-8));
            //}
            //if (enable_time_end != null)
            //{
            //    data = data.Where(w => w.EnableTime <= enable_time_end.Value.AddHours(-8));
            //}
            db.Connection.Close();
            return data;
        }
        public Method.Paging Get_Page(int p = 1, int take = 10)
        {
            return Method.Get_Page(Get_Count(), p, take);
        }

        public int Get_Count()
        {
            return Get().Count();
        }


        #region Insert
        public int Insert(VolunteersShow item, HttpPostedFileBase file, string vid, HttpServerUtilityBase Server)
        {
            var photos = "";
            s26webDataContext db = new s26webDataContext();
            if (file != null)
                if (file.ContentLength > 0 && file.ContentType.ToLower() == "image/jpeg" || file.ContentType == "image/png")
                    photos = Method.Upload_File(file, vid, Server);
                else
                    photos = "";
            try
            {
                 Volunteers new_item = new Volunteers
                {
                    Phone = item.Phone,
                    Password = Get_HashPassword(item.Password),
                    Name = item.Name,
                    BabyBirthday = item.BabyBirthday,
                    NowBrand = item.NowBrand,
                    BrandName = item.BrandName,
                    Email = item.Email,
                    CityId = item.CityId,
                    AreaId = item.AreaId,
                    Address = item.Address,
                    GiftMobile = item.GiftMobile,
                    CityId2 = item.CityId2,
                    AreaId2 = item.AreaId2,
                    Address2 = item.Address2,
                    Status = item.Status,
                    SendCount = item.SendCount,
                    Photos = photos,
                    SerialNo = item.SerialNo,
                    MemberNumber = item.MemberNumber,
                    FBConnect = item.FBConnect,
                    FBFriend = item.FBFriend,
                    Memo = item.Memo,
                    CreateTime = DateTime.UtcNow,
                    UpdateTime = DateTime.UtcNow,                         
                };
                db.Volunteers.InsertOnSubmit(new_item);
                db.SubmitChanges();
                db.Connection.Close();
                return new_item.Id;
            }
            catch 
            {
                return -1;
            }
        }   
        #endregion

        #region Update
        public int Update(VolunteersShowEdit item)
        {
            try
            {
                s26webDataContext db = new s26webDataContext();
                var data = db.Volunteers.FirstOrDefault(f => f.Id == item.Id);
                if (data != null)
                {
                    data.Phone = item.Phone;
                    if (item.Password != "" && item.Password != null)
                    {
                        data.Password = Get_HashPassword(item.Password);
                    }
                    data.Name = item.Name;
                    data.BabyBirthday = item.BabyBirthday;
                    data.NowBrand = item.NowBrand;
                    data.BrandName = item.BrandName;
                    data.Email = item.Email;
                    data.CityId = item.CityId;
                    data.AreaId = item.AreaId;
                    data.Address = item.Address;
                    data.GiftMobile = item.GiftMobile;
                    data.CityId2 = item.CityId2;
                    data.AreaId2 = item.AreaId2;
                    data.Address2 = item.Address2;
                    data.Status = item.Status;
                    //data.SendCount = v.SendCount;
                    data.SerialNo = item.SerialNo;
                    //data.Photo = v.Photos;
                    data.MemberNumber = item.MemberNumber;
                    data.FBConnect = item.FBConnect;
                    data.FBFriend = item.FBFriend;
                    data.Memo = item.Memo;
                    //data.UpdateTime = DateTime.UtcNow; //使用者更新時間
                    data.AdminUpdateTime = DateTime.UtcNow; //管理者更新
                    //data.LastMember

                    db.SubmitChanges();
                    db.Connection.Close();
                    return data.Id;
                }
                db.Connection.Close();
                return -1;
            }
            catch { return -1; }
        }
        #endregion
    }
}